server:
  port: 9000

spring:
  application:
    name: auth-server
  
  # Database configuration
  datasource:
    url: jdbc:h2:mem:authdb
    driver-class-name: org.h2.Driver
    username: sa
    password: 
  
  # H2 Console for development
  h2:
    console:
      enabled: true
      path: /h2-console
  
  # JPA configuration
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.H2Dialect
  
  # Redis configuration for session management and token blacklisting
  data:
    redis:
      host: localhost
      port: 6379
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
          max-wait: -1ms

  # Security configuration
  # security:
  #   oauth2:
  #     authorizationserver:
  #       issuer: http://localhost:9000
  #       client:
  #         registration:
  #           react-client:
  #             client-id: react-client
  #             client-secret: "{noop}secret"
  #             client-authentication-methods:
  #               - "client_secret_basic"
  #             authorization-grant-types:
  #               - "authorization_code"
  #               - "refresh_token"
  #             redirect-uris:
  #               - "http://localhost:3000/callback"
  #             scopes:
  #               - "openid"
  #               - "profile"
  #               - "api.read"
  #               - "api.write"
  #             require-authorization-consent: true
  #             client-settings:
  #               require-proof-key: true  # Enforce PKCE
  #               require-authorization-consent: true

# Actuator endpoints for monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: when-authorized

# Logging configuration
logging:
  level:
    org.springframework.security: DEBUG
    org.springframework.security.oauth2: DEBUG
    org.springframework.security.oauth2.server: DEBUG
    org.springframework.security.oauth2.server.authorization: DEBUG
    org.springframework.security.oauth2.server.resource: DEBUG
    org.springframework.security.web: DEBUG
    org.springframework.security.web.authentication: DEBUG
    org.springframework.security.web.filter: DEBUG
    org.springframework.security.web.access: DEBUG
    org.springframework.security.web.context: DEBUG
    org.springframework.security.web.FilterChainProxy: DEBUG
    org.springframework.security.web.util.matcher: DEBUG
    org.springframework.security.oauth2.server.resource.authentication: DEBUG
    org.springframework.security.oauth2.server.resource.introspection: DEBUG
    org.springframework.security.oauth2.server.resource.web: DEBUG
    org.springframework.security.oauth2.server.resource.web.authentication: DEBUG
    org.springframework.security.oauth2.jwt: DEBUG
    org.springframework.security.oauth2.jose: DEBUG
    org.springframework.web.servlet.mvc.method.annotation: DEBUG
    org.springframework.web.servlet.DispatcherServlet: DEBUG
    org.springframework.web.filter: DEBUG
    com.oauth.auth_server: DEBUG
    com.oauth.auth_server.controller: DEBUG
    com.oauth.auth_server.config: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# JWT Configuration
jwt:
  access-token-validity: 900  # 15 minutes
  refresh-token-validity: 86400  # 24 hours
  id-token-validity: 900  # 15 minutes 